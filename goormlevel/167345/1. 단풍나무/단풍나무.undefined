'''
단풍나무
N*N
r, c
i, j  S(i, j) 무들디 
값이 0 - 물들었음
각 나무는, 상하좌우 아침 기준 물들어있는 구역 수만큼 감소한다. 
최소값은 0

며칠만에 물들지


'''
from collections import deque
from copy import deepcopy
N = int(input())
day = []
for _ in range(N):
	day.append(list(map(int, input().split())))
night = deepcopy(day)
tree = deque([])
ans = 0


def change_tree(tree):
	global night, day
	
	dx = [-1, 1, 0, 0]
	dy = [0, 0, -1, 1]
	
	while tree:
		x, y = tree.popleft()
		cnt = 0

		# 물들 개수 확인
		for i in range(4):
			nx, ny = x + dx[i], y + dy[i]

			if nx < 0 or nx >= N or ny < 0 or ny >= N:
				continue

			if day[nx][ny] == 0:
				cnt += 1

		tmp = day[x][y] - cnt
		night[x][y] = 0 if tmp < 0 else tmp
		# tree가 다 끝나면, night부분을 day로 옮기고 다시 tree를 채운다. 
		# 반복, tree가 없을때까지
	
	return 


while True:
	# 0 이 아닌 것 기준으로 
	for i in range(N):
		for j in range(N):
			if day[i][j] > 0:
				tree.append((i, j))
	if tree:
		change_tree(tree)
		ans += 1
		day = deepcopy(night)
	else:
		break

print(ans)






